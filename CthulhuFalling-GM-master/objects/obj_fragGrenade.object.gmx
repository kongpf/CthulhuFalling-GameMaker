<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fragGrenade</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>obj_launchWeapon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
// Name
name = "Frag Grenade";
// Related pick object
pick_weapon = obj_fragGrenadePick;
bullets = 1;
sloppy = 5;
f_speed = 12;
f_angle = 45;
gra = .75;
shoot = false;
scale = 2;
draw_gap = 16;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit event
if (not shoot) {
   event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Throw
if (shoot) {
   gravity = gra;
}

/*if (keyboard_check(vk_up)) {
   f_angle++;
}

if (keyboard_check(vk_down)) {
   f_angle--;
}*/

f_angle = abs(mouse_x - obj_player.x);

if (not shoot) {
   if (mouse_check_button_pressed(mb_left)) {
      direction = f_angle;
      speed = f_speed;
      shoot = true;
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explosion
if (place_meeting(x, y, obj_environmentItem) or place_meeting(x, y, obj_dirtDestructible)) {
   // Remove it from inventory
   if (instance_exists(obj_bag)) {
      obj_bag.bag[obj_bag.bag_slot] = noone;
   }

   // Smoke (TODO: particles)
   effect_create_above(ef_explosion, x, y, 5, c_orange);
   
   // Shake screen
   instance_create(x, y, obj_screenShake);
   
   // Sound
   if (ENABLE_AUDIO)
      audio_play_sound(snd_fragExplosion, 10, false);
   
   // Do damage
   var damaged = ds_list_create();
   
   // Damage player if in range
   if (collision_circle(x, y, 32, obj_player, false, true) != noone) {
      // Decrease lives by 2
      lives -= 2;
   }
   
   // Get a list of colliding enemies
   damaged = collision_circle_list(x, y, 32, obj_enemy, false, true);
   
   if (damaged != noone) {
      for (i = 0; i &lt; ds_list_size(damaged); i++) {
          if (instance_exists(damaged[| i])) {
             with (damaged[| i]) {
                  instance_destroy();
             }
          }
      }
   }
   
   // If destructible, than destroy
   if (place_meeting(x, y, obj_dirtDestructible)) {
      // Get a list of colliding destructible objects
      destroy = collision_circle_list(x, y, 32, obj_dirtDestructible, false, true);
      
      if (destroy != noone) {
         for (i = 0; i &lt; ds_list_size(destroy); i++) {
             if (instance_exists(destroy[| i])) {
                with (destroy[| i]) {
                     instance_destroy();
                }
             }
         }
      }
   }
   
   // Destroy instance
   instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw path
var target_x = obj_player.x;
var target_y = obj_player.y;
var spawn = true;

for (var i = 0; i &lt; draw_gap; i++) {
    var X = i * draw_gap;
    
    if (f_angle &gt; 90 or f_angle &gt; 180) {
       X = -X;
    }
    
    var Y = projectile_motion(X, f_speed, f_angle, 0, 0, gra);

    if (i != 0)
       draw_sprite_ext(spr_fragPathPoint, 0, target_x + X, target_y - Y, (scale / (i + 1)), (scale / (i + 1)), 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
