<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
grav = 0.4;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 2;
movefactor = 0.2;
hp = 100;
facing = 1;
active = true;

/*
OLD INVENTORY SYSTEM
*/
current_weapon = noone;
new_weapon = noone; // Used when the player picks up a new weapon
respawn_weapon = true;

current_item = noone;
new_item = noone; // Used when the player picks up a new item

current_launch_weapon = noone;
new_launch_weapon = noone; // Used when the player picks up a new launch weapon

// General item
current_bag_item = noone;
new_bag_item_switch = noone;
new_bag_item = noone;
respawn_bag_item = true;

walking = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>711</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_life</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn current weapons
if (current_weapon != noone) {
   instance_create(x  - 16, y + 16, current_weapon);
   if (not instance_exists(obj_crosshair))
      instance_create(x - 32, y + 32, obj_crosshair);
}

if (current_item != noone) {
   instance_create(x + 16, y + 16, current_item);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check bounds
if (y &gt; room_height) {
    room_goto(rm_dead);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>active == true</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get player input
key_right = keyboard_check(ord('D'));
key_left = -keyboard_check(ord('A'));
key_jump = keyboard_check_pressed(vk_space);
key_jump_held = keyboard_check(vk_space);
key_climb_up = keyboard_check(ord('W'));
key_climb_down = keyboard_check(ord('S'));
key_exit = keyboard_check_pressed(vk_escape);
key_melee = max(keyboard_check_pressed(ord('E')), keyboard_check_pressed(ord('Q')), 0);

move = key_left + key_right;
hsp = move * movespeed;

if (key_exit) game_end();

// Sound
if (key_right) {
   facing = 1;
} 

if (-key_left) {
  facing = -1;
}

// Apply gravity
if (vsp &lt; 10) vsp += grav;

// Check jump
if (place_meeting(x, y + 1, obj_environmentItem)) {
    vsp = key_jump * -jumpspeed;
    
    if (-key_left) {
       sprite_index = spr_playerRunLeft;
       
       if (not key_jump) {
          walking = true;
       } else {
          walking = false;
       }
    } else if (key_right) {
       sprite_index = spr_playerRunRight;
       
       if (not key_jump) {
          walking = true;
       } else {
          walking = false;
       }
    } else {
       sprite_index = spr_playerIdle;
       
       walking = false;
    }
} else {
  sprite_index = spr_playerJump;
}

if ((vsp &lt; 0) and (!key_jump_held)) vsp = max(vsp, 0);

// Check climb items
if (place_meeting(x, y, obj_climbItem)) {
    vsp = key_jump * -jumpspeed;

    if (key_climb_up) {
       vsp = -movespeed;
    }
   
    if (key_climb_down) {
       vsp = movespeed;
    }
}

// Inventory
/*if (mouse_wheel_up()) {
   // Increase current slot
   bag_slot = clamp(bag_slot++, 0, bag_size);
   
   // Set current item
   current_weapon = bag[bag_slot];
}

if (mouse_wheel_down()) {
   // Decrease current slot
   bag_slot = clamp(bag_slot--, 0, bag_size);
   
   // Set current item
   current_weapon = bag[bag_slot];
}*/

// Melee
if (key_melee) {
   if (facing == 1) {
      sprite_index = spr_meleeRight;
      instance_create(x + sprite_width, y, obj_invisibleMelee);
   }
   
   if (facing == -1) {
      sprite_index = spr_meleeLeft;
      instance_create(x - sprite_width, y, obj_invisibleMelee);
   }
}

// Horizontal collision
if (place_meeting(x + hsp, y, obj_environmentItem)) {
    while (!place_meeting(x + sign(hsp), y, obj_environmentItem)) {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

// Vertical collision
if (place_meeting(x, y + vsp, obj_environmentItem)) {
    while (!place_meeting(x, y + sign(vsp), obj_environmentItem)) {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set animation speed
image_speed = 0.2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check lives
if (lives &lt;= 0) {
   effect_create_above(ef_explosion, x, y, 2, c_red);
   instance_create(x, y, obj_playerDead);
   with (current_bag_item) instance_destroy();
   with (obj_bag) instance_destroy();
   if (instance_exists(obj_crosshair)) {
      with (obj_crosshair) instance_destroy();
   }
   instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera
//camera_movement();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set invisible in splash screen room (REMOVE)
if (room == rm_splashScreen) {
   instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pick up new bag item
if (place_meeting(x, y, obj_bagItem) and keyboard_check_pressed(vk_enter)) {
      that_instance = instance_place(x, y, obj_bagItem);
      var first_free = -1;
      
      /*if (instance_exists(obj_bag)) {
          obj_bag.bag[obj_bag.bag_slot] = that_instance.object_index;
          new_bag_item = that_instance.real_weapon;
      }*/
      
      for (i = 0; i &lt; obj_bag.bag_size; i++) {
          if (obj_bag.bag[i] == noone and first_free == -1) {
             first_free = i;
          }
      }
      
      if (first_free != -1) {
         // Put object in first free slot and DO NOT use it if you're already using something
         obj_bag.bag[first_free] = that_instance.object_index;
         
         if (current_bag_item == noone) {
            new_bag_item = that_instance.real_weapon;
         }
      } else {
        // No free slots, substitute with one in use and drop last one
        obj_bag.bag[obj_bag.bag_slot] = that_instance.object_index;
        new_bag_item = that_instance.real_weapon;
      }
      
      // Destroy current instance
      with (that_instance) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check new bag item
if (new_bag_item != noone) {
   // This means that the player picked up something
   audio_play_sound(snd_reload, 10, false);
   
   if (current_bag_item != noone) {
      if (instance_exists(current_bag_item)) {
          // Put current weapon to the ground with its pick object
          instance_create(x, y, current_bag_item.pick_weapon);
      }
   }
   
   // Remove current weapon instance if exists
   with current_bag_item instance_destroy();
   
   // Add and spawn new weapon
   current_bag_item = new_bag_item;
   new_bag_item = noone;
   instance_create(x + 16, y - 16, current_bag_item);
   
   if (object_get_parent(current_bag_item) != obj_shootWeapon) {
      if (instance_exists(obj_crosshair)) with (obj_crosshair) instance_destroy();
   } else {
      if (not instance_exists(obj_crosshair)) {
         instance_create(x + 32, y - 32, obj_crosshair);
      }
   }
   
   // Set crosshair sloppy (from weapon)
   if (instance_exists(obj_crosshair) and object_get_parent(current_bag_item) == obj_shootWeapon) {
      obj_crosshair.sloppy = current_bag_item.sloppy;
   }
   
   // TODO: Add case if weapon is melee weapon
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check mouse wheel
if (mouse_wheel_down()) {
   if ((obj_bag.bag_slot + 1) &gt;= obj_bag.bag_size) {
      obj_bag.bag_slot = 0;
   } else {
      obj_bag.bag_slot++;
   }
   
   // Set weapon
   if (instance_exists(obj_player)) {
      if (obj_bag.bag[obj_bag.bag_slot] != noone) {
         respawn_bag_item = false;
         new_bag_item_switch = obj_bag.bag[obj_bag.bag_slot].real_weapon;
      }
   }
}

if (mouse_wheel_up()) {
   if ((obj_bag.bag_slot) &lt; 1) {
      obj_bag.bag_slot = obj_bag.bag_size - 1;
   } else {
      obj_bag.bag_slot--;
   }
   
   // Set weapon
   if (instance_exists(obj_player)) {
      if (obj_bag.bag[obj_bag.bag_slot] != noone) {
         respawn_bag_item = false;
         new_bag_item_switch = obj_bag.bag[obj_bag.bag_slot].real_weapon;
      }
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check new bag switch item
///Check new bag item
if (new_bag_item_switch != noone) {
   // This means that the player picked up something
   audio_play_sound(snd_reload, 10, false);
   
   // Remove current weapon instance if exists
   with current_bag_item instance_destroy();
   
   // Add and spawn new weapon
   current_bag_item = new_bag_item_switch;
   new_bag_item_switch = noone;
   instance_create(x + 16, y - 16, current_bag_item);
   
   if (object_get_parent(current_bag_item) != obj_shootWeapon) {
      if (instance_exists(obj_crosshair)) with (obj_crosshair) instance_destroy();
   } else {
      if (not instance_exists(obj_crosshair)) {
         instance_create(x + 32, y - 32, obj_crosshair);
      }
   }
   
   // Set crosshair sloppy (from weapon)
   if (instance_exists(obj_crosshair) and object_get_parent(current_bag_item) == obj_shootWeapon) {
      obj_crosshair.sloppy = current_bag_item.sloppy;
   }
   
   // TODO: Add case if weapon is melee weapon
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if colliding with ghost environment
if (instance_exists(obj_cameraManager)) {
   if (collision_circle(x, y, 38, obj_ghostEnvironmentItem, false, true) != noone) {
      obj_cameraManager.can_spawn = true;
   } else {
      obj_cameraManager.can_spawn = false;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>714</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_life_images</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>5</kind>
            <sprite>spr_life</sprite>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw current weapon (if any)
if (current_bag_item != noone and instance_exists(current_bag_item)) {
   if (object_get_parent(current_bag_item) == obj_shootWeapon) {
      draw_text(50, 50, current_bag_item.name + " [" + string(current_bag_item.bullets) + "]");
   } else {
      draw_text(50, 50, current_bag_item.name);
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
